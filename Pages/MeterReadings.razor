@page "/meter_readings"

@using Microsoft.EntityFrameworkCore
@using testBlazor.Data;
@using testBlazor.Data.Models;
@using testBlazor.Data.services
@using System.Text;
@using testBlazor.Data.security;

@inject IClientService clientService
@inject IClientAddressService addressService;
@inject IMeterReadingsService meterService;
@inject NavigationManager nav;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService;

@attribute [Authorize]

<head>
    <title>Подача показаний</title>
</head>
<div id="main-div">
    <MeterReadingsMenuBar />

    <div class="position-form-menu">
        <div class="form-background">
            <form @onsubmit="handleMeterForm">
                <div id="name-form">Показания</div>
                <div id="select-address" hidden="@isAddressSelectHidden">
                    <label>Заполнить адрес: </label>
                    <select @onchange="onAddressSelectChange">
                        <option value="" selected disabled hidden>Выбрать адрес...</option>
                        @foreach (var address in clientAddresses)
                        {
                            <option>@address.Street, @address.Building, @address.House, @address.Apartment</option>
                        }
                    </select>
                </div>

                <div id="address">
                    <div>
                        <label for="">Улица *</label>
                        <br>
                        <input name="" class="address-first-width" 
                                       type="text" 
                                       required 
                                       pattern="^[-,.А-Яа-яЁё\s]+$" 
                                       @bind="address.Street">
                    </div>

                    <div>
                        <label for="">Корпус</label>
                        <br>
                        <input name="" 
                               class="address-third-width" 
                               type="text" 
                               @bind="address.House">
                    </div>

                    <div>
                        <label for="">Дом *</label>
                        <br>
                        <input name=""
                               class="address-third-width" 
                               type="number" 
                               required 
                               min="1"
                               @bind="address.Building">
                    </div>

                    <div>
                        <label for="">Квартира *</label>
                        <br>
                        <input name="" 
                               class="address-third-width" 
                               type="number"
                               required 
                               min="1"
                               @bind="address.Apartment">
                    </div>
                </div>

                <div id="table">
                    <div id="name-column">
                        <div class="column" name="right-line">
                            <div class="value-table">Счетчик</div>
                        </div>
                        
                        <div class="column" name="right-line">
                            <div class="value-table">Предыдущее значение</div>
                        </div>

                        <div class="column">
                            <div class="value-table">Текущее значение</div>
                        </div>
                    </div>

                    @foreach (var meter in meterReadings)
                    {
                        <div class="table-row">
                            <div class="column" name="right-line">
                                <div class="value-table">@meter.Name</div>
                            </div>

                            <div class="column" name="right-line">
                                <div class="value-table">@meter.BeforeData</div>
                            </div>

                            <div class="column">
                                <div class="value-table">@meter.Data</div>
                            </div>
                        </div>
                    }
                </div>

                <div class="table-row" name="meter_row">
                    <div class="column" name="right-line">
                        <div class="value-table">
                            <label for="meter_type">Тип счетчика</label>
                            <select name="meter_type" @onchange="onTypeSelectChange">
                                <option value="" selected disabled hidden>Выбрать счетчик...</option>
                                <option>Горячая вода</option>
                                <option>Холодная вода</option>
                                <option>Газ</option>
                            </select>
                        </div>
                    </div>
                    <div class="column" name="right-line">
                        <div class="value-table">
                            <label for="meter_past_value">Предыдущее значение</label>
                            <input name="meter_past_value" disabled type="text" pattern="^[-,0-9]+$" @bind="reading.BeforeData">
                        </div>
                    </div>
                    <div class="column">
                        <div class="value-table">
                            <label for="meter_present_value">Текущее значение</label>
                            <input name="meter_present_value" type="number" min="1" @bind="reading.Data">
                        </div>
                    </div>
                </div>
                <input class="Submission" type="button" name="add-meter" value="Добавить счетчик" required @onclick="addMeter">
                @if (!isMessageHidden)
                {
                    <label>@message</label>
                }
                <input class="Submission" type="submit" name="send" value="Отправить" required>
                <div id="obligatory_field">* Обязательное поле</div>
            </form>
        </div>
    </div>
</div>

@code {

    public List<MeterReading> meterReadings = new();
    public List<ClientAddress> clientAddresses = new();

    Client? client = new Client();

    ClientAddress address = new ClientAddress();

    MeterReading reading = new MeterReading();

    MeterReading prevMeter = new MeterReading();



    public string email { get; set; } = "";

    public string message { get; set; } = "";

    public bool isAddressSelectHidden { get; set; } = true;
    public bool isAddressNew { get; set; } = true;
    public bool isMessageHidden { get; set; } = true;


    protected override async Task OnInitializedAsync()
    {
        var result = await sessionStorageService.GetItemAsync<string>("email");
        if (result != null)
        {
            try
            {
                email = result;
                client = clientService.getSingleClientByEmail(email);

                clientAddresses = addressService.GetClientAddress(client.ClientId);
                if (clientAddresses.Any()) isAddressSelectHidden = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
            }
        }
    }

    private void handleMeterForm()
    {
        try
        {
            if (!meterReadings.Any())
            {
                message = "Добавьте хотя бы один счетчик!";
                isMessageHidden = false;
            }
            else
            {
                if (isAddressNew)
                {
                    address.Client = client;
                    address.ClientId = client.ClientId;
                    addressService.insertClientAddress(address);
                }
                foreach (var mtr in meterReadings)
                {
                    mtr.ClientAddress = address.Street + ", " + address.Building + ", " + address.House + ", " + address.Apartment;
                    mtr.Date = DateTime.Now;
                    mtr.Client = client;
                    mtr.ClientId = client.ClientId;
                }
                meterService.insertMeters(meterReadings);
                nav.NavigateTo("/readings_history");
            }
        }
        catch (Exception ex) { }
    }

    private void onAddressSelectChange(ChangeEventArgs e)
    {
        try
        {
            string temp = e.Value.ToString();
            string[] temp2 = temp.Split(',');
            if (temp2.Length > 1) isAddressNew = false;
            address.Street = temp2[0].Trim();
            address.Building = Convert.ToInt32(temp2[1].Trim());
            address.House = temp2[2].Trim();
            address.Apartment = Convert.ToInt32(temp2[3].Trim());
        }
        catch (Exception ex) { }
        StateHasChanged();
    }

    private void onTypeSelectChange(ChangeEventArgs e)
    {
        try
        {
            reading.Name = e.Value?.ToString()?.ToLower();
            prevMeter = meterService.getMeterWithPreviousDataByClientIdAndMeterType(client?.ClientId, e.Value?.ToString()?.ToLower(), address.Street + ", " + address.Building + ", " + address.House + ", " + address.Apartment);
            if (prevMeter == null)
            {
                reading.BeforeData = "-";
            }
            else reading.BeforeData = prevMeter.Data.ToString();
        }
        catch (Exception ex) { }
        StateHasChanged();
    }

    private void addMeter()
    {
        try
        {
            if (reading.BeforeData != null && reading.Data != null && reading.Name != null)
            {
                isMessageHidden = true;                
                meterReadings.Add(new MeterReading(reading.Name, reading.Data, reading.Date, reading.ClientId, reading.ClientAddress, reading.BeforeData, reading.Client));
            }
            else {
                isMessageHidden = false;
                message = "Заполните все данные о счетчике!";
            }

        }
        catch (Exception ex) { }
        StateHasChanged();
    }
}
