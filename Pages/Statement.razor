@page "/statement_create"

@using Microsoft.EntityFrameworkCore
@using testBlazor.Data;
@using testBlazor.Data.Models;
@using testBlazor.Data.services
@using System.Text;
@using testBlazor.Data.security;

@inject IClientService clientService;
@inject IRequestService requestService;
@inject IClientAddressService addressService;
@inject NavigationManager nav;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService;

@attribute [Authorize]

<div id="main_div">
    <StatementMenuBar />
    @*<div id="sidebar">
        <div class="sidebar-name">Создание заявки</div>
        <div class="sidebar-name">История</div>
    </div>*@
@*    <div class="position-form-menu">
        <div class="form-background">
            <div id="table">
                <div id="name_column">
                    <div class="Column" name="right_line"><div class="Value_table">Дата</div></div>
                    <div class="Column" name="right_line"><div class="Value_table">Статус</div></div>
                    <div class="Column" name="right_line"><div class="Value_table">Тема</div></div>
                    <div class="Column"><div class="Value_table">Адрес</div></div>
                </div>
                @foreach (var rq in requests)
                {
                    <div class="Row">
                        <div class="Column" name="right_line"><div class="Value_table">@rq.Date.Value.ToShortDateString()</div></div>
                        <div class="Column" name="right_line"><div class="Value_table">@rq.Status</div></div>
                        <div class="Column" name="right_line"><div class="Value_table">@rq.Name</div></div>
                        <div class="Column"><div class="Value_table">@rq.Address</div></div>
                    </div>
                }
            </div>
        </div>
    </div>*@
    <div class="position-form-menu">
        <div class="form-background">
            <EditForm Model="@statementModel" OnSubmit="@handleStatementForm">
                <div id="nameForm">Новая заявка</div>
                <div id="selectAddress" hidden="@isAddressSelectHidden">
                    <label>Заполнить адрес</label>
                    <select @onchange="onAddressSelectChange">
                        <option value="" selected disabled hidden>Выбрать адрес...</option>
                        @foreach (var address in clientAddresses)
                        {
                            <option>@address.Street, @address.Building, @address.House, @address.Apartment</option>
                        }
                    </select>
                </div>
                <div id="address"> 
                    <div><label for="">Улица *</label><br><input class="AddressFirstWidth" name="" type="text" required pattern="^[-,.А-Яа-яЁё\s]+$" @bind-value="statementModel.street"></div>
                    <div><label for="">Дом *</label><br><input class="AddressThirdWidth" name="" type="number" required @bind-value="statementModel.building"></div>
                    <div><label for="">Корпус</label><br><input class="AddressThirdWidth" name="" type="text" @bind-value="statementModel.house"></div>
                    <div><label for="">Квартира *</label><br><input class="AddressThirdWidth" name="" type="number" required @bind-value="statementModel.apartment"></div>
                    <div><label for="">Фамилия *</label><br><input class="AddressFirstWidth" name="" type="text" pattern="^[А-Яа-яЁё\s]+$" disabled="@isSurnameDisabled" required @bind-value="statementModel.surname"></div>
                    <div><label for="">Имя *</label><br><input class="AddressSecondWidth" name="" type="text" pattern="^[А-Яа-яЁё\s]+$" disabled="@isNameDisabled" required @bind-value="statementModel.name"></div>
                    <div><label for="">Отчество *</label><br><input class="AddressSecondWidth" name="" type="text" pattern="^[А-Яа-яЁё\s]+$" disabled="@isPatronymicDisabled" required @bind-value="statementModel.patronymic"></div>
                    <div><label for="">Телефон</label><br><input class="AddressFirstWidth" name="" type="text" pattern="[\+]\d{11}" placeholder="+79271234567" disabled="@isPhoneDisabled" @bind-value="statementModel.phoneNumber"></div>
                    <div><label for="">Электронная почта *</label><br><input class="AddressFirstWidth" name="" type="email" disabled required @bind-value="statementModel.email"></div>
                    <div><label for="">Тема Обращения *</label><br><input class="AddressFirstWidth" name="" type="text" required @bind-value="statementModel.subject"></div>
                    <div><label for="comment">Ваше Сообщение *</label><br><textarea id="comment" name="comment" @bind="statementModel.comment"></textarea></div>
                </div>
                <input class="Submission" type="submit" name="send" value="Отправить" required>
            </EditForm>
            <div id="obligatory_field">* Обязательное поле</div>
        </div>
    </div>
</div>
@code {

    Client? client = new Client();

    Request? request = new Request();

    List<ClientAddress> clientAddresses = new();

    StatementModel statementModel = new();

    public string email { get; set; } = "";

    public bool isSurnameDisabled { get; set; } = true;
    public bool isNameDisabled { get; set; } = true;
    public bool isPatronymicDisabled { get; set; } = true;
    public bool isPhoneDisabled { get; set; } = true;
    public bool isAddressSelectHidden { get; set; } = true;

    //List<Request> requests = new();

    //Пока не нужно, но может пригодится
    //public int? highestRequestNumber { get; set; } = 0;
    //highestRequestNumber = requestService.getHighestRequestNumber() + 1;

    public void changeData()
    {
        nav.NavigateTo("/user");
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await sessionStorageService.GetItemAsync<string>("email");
        if (result != null)
        {
            try
            {
                email = result;
                client = clientService.getSingleClientByEmail(email);
                statementModel.email = email;
                statementModel.name = client.Name;
                statementModel.surname = client.Surname;
                statementModel.patronymic = client.Patronymic;
                statementModel.phoneNumber = client.PhoneNumber;
                if (statementModel.name == null) isNameDisabled = false;
                if (statementModel.surname == null) isSurnameDisabled = false;
                if (statementModel.patronymic == null) isPatronymicDisabled = false;
                if (statementModel.phoneNumber == null) isPhoneDisabled = false;
                StateHasChanged();
                //requests = requestService.getRequestsByClientId(client.ClientId);
                clientAddresses = addressService.GetClientAddress(client.ClientId);
                if (clientAddresses.Any()) isAddressSelectHidden = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
            }
        }
    }

    private void onAddressSelectChange(ChangeEventArgs e)
    {
        try
        {
            string temp = e.Value.ToString();
            string[] temp2 = temp.Split(',');
            statementModel.street = temp2[0].Trim();
            statementModel.building = temp2[1].Trim();
            statementModel.house = temp2[2].Trim();
            statementModel.apartment = temp2[3].Trim();
        }catch (Exception ex){}
        StateHasChanged();
    }

    private void handleStatementForm()
    {
        try
        {
            request.Date = DateTime.Now;
            request.Status = "Подана";
            request.Client = client;
            request.ClientId = client.ClientId;
            request.Address = statementModel.street + ", " + statementModel.building + ", " + statementModel.house + ", " + statementModel.apartment;
            request.Name = statementModel.subject;
            request.Comment = statementModel.comment;
            requestService.insertRequest(request);
            if (!isNameDisabled || !isSurnameDisabled || !isPatronymicDisabled || !isPhoneDisabled)
            {
                try
                {
                    client.Name = statementModel.name;
                    client.Surname = statementModel.surname;
                    client.Patronymic = statementModel.patronymic;
                    client.PhoneNumber = statementModel.phoneNumber;
                    clientService.updateClientByEmail(email, client);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"{ex.Message}");
                }
            }
            nav.NavigateTo(nav.Uri, forceLoad: true);
        }catch (Exception ex){}
    }
}
