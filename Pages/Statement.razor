@page "/statement_create"

@using Microsoft.EntityFrameworkCore
@using testBlazor.Data;
@using testBlazor.Data.Models;
@using testBlazor.Data.services
@using System.Text;
@using testBlazor.Data.security;

@inject IClientService clientService;
@inject IRequestService requestService;
@inject IClientAddressService addressService;
@inject NavigationManager nav;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService;

@attribute [Authorize]

<head>
    <title>Подача заявки</title>
</head>

<div id="main-div">
    <StatementMenuBar />

    <div class="position-form-menu">
        <div class="form-background">
            <EditForm Model="@statementModel" OnSubmit="@handleStatementForm">
                <div id="name-form">Новая заявка</div>
                <div id="select-address" hidden="@isAddressSelectHidden">
                    <label>Заполнить адрес: </label>
                    <select @onchange="onAddressSelectChange">
                        <option value="" selected disabled hidden>Выбрать адрес...</option>
                        @foreach (var address in clientAddresses)
                        {
                            <option>@address.Street, @address.Building, @address.House, @address.Apartment</option>
                        }
                    </select>
                </div>
                <div id="address">
                    <div>
                        <label for="">Улица *</label>
                        <br>
                        <input class="address-first-width"
                               name=""
                               type="text"
                               required 
                               pattern="^[-,.А-Яа-яЁё\s]+$"
                               @bind-value="statementModel.street">
                    </div>

                    <div>
                        <label for="">Дом *</label>
                        <br>
                        <input class="address-third-width" 
                               name="" 
                               type="number"
                               required 
                               min="1"
                               @bind-value="statementModel.building">
                    </div>

                    <div>
                        <label for="">Корпус</label>
                        <br>
                        <input class="address-third-width" 
                               name="" 
                               type="text"
                               @bind-value="statementModel.house">
                    </div>

                    <div>
                        <label for="">Квартира *</label>
                        <br>
                        <input class="address-third-width"
                               name="" 
                               type="number" 
                               required 
                               min="1"
                               @bind-value="statementModel.apartment">
                    </div>

                    <div>
                        <label for="">Фамилия *</label>
                        <br>
                        <input class="address-first-width" 
                               name="" 
                               type="text"
                               pattern="^[А-Яа-яЁё\s]+$" 
                               disabled="@isSurnameDisabled" 
                               required 
                               @bind-value="statementModel.surname">
                    </div>

                    <div>
                        <label for="">Имя *</label>
                        <br>
                        <input class="address-second-width" 
                               name="" 
                               type="text" 
                               pattern="^[А-Яа-яЁё\s]+$"
                               disabled="@isNameDisabled" 
                               required 
                               @bind-value="statementModel.name">
                    </div>

                    <div>
                        <label for="">Отчество</label>
                        <br>
                        <input class="address-second-width" 
                               name="" 
                               type="text" 
                               pattern="^[А-Яа-яЁё\s]+$" 
                               disabled="@isPatronymicDisabled"                              
                               @bind-value="statementModel.patronymic">
                    </div>

                    <div>
                        <label for="">Телефон</label>
                        <br>
                        <input class="address-first-width" 
                               name="" 
                               type="text" 
                               pattern="[\+]\d{11}" 
                               placeholder="+7 000 000 00 00" 
                               disabled="@isPhoneDisabled"
                               @bind-value="statementModel.phoneNumber">
                    </div>

                    <div>
                        <label for="">Электронная почта *</label>
                        <br>
                        <input class="address-first-width" 
                               name="" 
                               type="email" 
                               disabled 
                               required 
                               @bind-value="statementModel.email">
                    </div>

                    <div>
                        <label for="">Тема Обращения *</label>
                        <br>
                        <input class="address-first-width" 
                               name="" 
                               type="text" 
                               required 
                               @bind-value="statementModel.subject">
                    </div>

                    <div>
                        <label for="comment">Ваше Сообщение *</label>
                        <br>
                        <textarea id="comment" 
                                  name="comment" 
                                  @bind="statementModel.comment">
                              </textarea>
                    </div>

                </div>
                <input class="Submission" type="submit" name="send" value="Отправить" required>
            </EditForm>
            <div id="obligatory_field">* Обязательное поле</div>
        </div>
    </div>
</div>
@code {

    Client? client = new Client();

    Request? request = new Request();

    List<ClientAddress> clientAddresses = new();

    StatementModel statementModel = new();

    public string email { get; set; } = "";

    public bool isSurnameDisabled { get; set; } = true;

    public bool isNameDisabled { get; set; } = true;

    public bool isPatronymicDisabled { get; set; } = true;

    public bool isPhoneDisabled { get; set; } = true;

    public bool isAddressSelectHidden { get; set; } = true;

    public void changeData()
    {
        nav.NavigateTo("/user");
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await sessionStorageService.GetItemAsync<string>("email");
        if (result != null)
        {
            try
            {
                email = result;
                client = clientService.getSingleClientByEmail(email);
                statementModel.email = email;
                statementModel.name = client.Name;
                statementModel.surname = client.Surname;
                statementModel.patronymic = client.Patronymic;
                statementModel.phoneNumber = client.PhoneNumber;
                if (statementModel.name == null) isNameDisabled = false;
                if (statementModel.surname == null) isSurnameDisabled = false;
                if (statementModel.patronymic == null) isPatronymicDisabled = false;
                if (statementModel.phoneNumber == null) isPhoneDisabled = false;
                StateHasChanged();
                clientAddresses = addressService.GetClientAddress(client.ClientId);
                if (clientAddresses.Any()) isAddressSelectHidden = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
            }
        }
    }

    private void onAddressSelectChange(ChangeEventArgs e)
    {
        try
        {
            string temp = e.Value.ToString();
            string[] temp2 = temp.Split(',');
            statementModel.street = temp2[0].Trim();
            statementModel.building = temp2[1].Trim();
            statementModel.house = temp2[2].Trim();
            statementModel.apartment = temp2[3].Trim();
        }
        catch (Exception ex) { }
        StateHasChanged();
    }

    private void handleStatementForm()
    {
        try
        {
            request.Date = DateTime.Now;
            request.Status = "Подана";
            request.Client = client;
            request.ClientId = client.ClientId;
            request.Address = statementModel.street + ", " + statementModel.building + ", " + statementModel.house + ", " + statementModel.apartment;
            request.Name = statementModel.subject;
            request.Comment = statementModel.comment;
            requestService.insertRequest(request);
            if (!isNameDisabled || !isSurnameDisabled || !isPatronymicDisabled || !isPhoneDisabled)
            {
                try
                {
                    client.Name = statementModel.name;
                    client.Surname = statementModel.surname;
                    client.Patronymic = statementModel.patronymic;
                    client.PhoneNumber = statementModel.phoneNumber;
                    clientService.updateClientByEmail(email, client);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"{ex.Message}");
                }
            }
            nav.NavigateTo("/statement_history");
        }
        catch (Exception ex) { }
    }
}
