@page "/login"

@using MailKit.Net.Smtp;
@using MailKit;
@using MimeKit;
@using Microsoft.EntityFrameworkCore
@using testBlazor.Data;
@using testBlazor.Data.Models;
@using testBlazor.Data.security;
@using testBlazor.Data.services
@using System.Text;
@using MailKit.Security;
@using System.Net.Mail;

@inject IClientService ClientService
@inject NavigationManager nav;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject IConfiguration configuration;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService;

<head>
    <title>Вход в личный кабинет</title>
</head>
<div id="form-entry">

    <div id="logo"></div>

    <label for="entry-button" id="entry-label">Вход в личный кабинет</label>

    <EditForm name="sending-email" Model="@loginModel" OnSubmit="@handleUserAuthorization">

        <div class="contact">
            <label for="email">Электронная почта</label>
            <input type="email" name="email" required @bind="myemail">
        </div>

        <div class="contact">
            <label for="pswd">Одноразовый пароль</label>
            <input type="password" name="pswd" @bind="userpassword" required>
        </div>

        <div id="error-password">@errmessage</div>

        <div id="buttons-row">
            @if(messageHasSend){
                <input type="button" name="send-password" value=@timer.ToString("mm':'ss") >
            }
            else
            {
                <input type="button" name="send-password" value="Получить пароль" @onclick="sendEmail">
            }
            
            
            <input type="submit" name="entry-button" value="Войти">
        </div>

        <div id="consent">
            <input type="checkbox" name="checkbox" required>
            <label for="checkbox">
                Вы соглашаетесь с правилами <a href="">Пользовательского соглашения</a> и <a href="">Политикой обработки персональных данных</a>.
            </label>
        </div>

    </EditForm>

    <a id="support-on-login" href="">Служба поддержки</a>
</div>

@code {
    private string message { get; set; } = "";

    private const int timerLenght = 1;

    private TimeSpan timer = new TimeSpan(0, timerLenght, 0);

    private bool messageHasSend { get; set; } = false;

    private string errmessage { get; set; } = "";

    private string? myemail { get; set; } = "";

    private string? userpassword { get; set; } = "";

    public Client? client = new Client();
    public Client? cli = new Client();

    public LoginModel loginModel = new();

    private string password = "";

    private bool clientExistFlag = false;

    public string CreatePassword(int length)
    {
        const string valid = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder res = new StringBuilder();
        Random rnd = new Random();
        while (0 < length--)
        {
            res.Append(valid[rnd.Next(valid.Length)]);
        }
        return res.ToString();
    }

    private async void sendEmail()
    {
        errmessage = "";
        try
        {
            string address = myemail;
            address = new MailAddress(address).Address;
            if (address != myemail || !myemail.Contains('.')) errmessage = "Неверный формат адреса эл. почты";
        }
        catch (Exception ex)
        {
            errmessage = "Неверный формат адреса эл. почты";
        }
        StateHasChanged();
        if (errmessage == "")
        {

            try
            {
                password = CreatePassword(10);
                saveOrUpdateUser();
                using (MimeMessage mail = new MimeMessage())
                {
                    mail.From.Add(new MailboxAddress("ТСЖ", "gptevcat@gmail.com"));
                    mail.To.Add(new MailboxAddress("Павлик из 3 подъезда", myemail));
                    mail.Subject = "ТСЖ. Одноразовый пароль для входа на сайт";
                    mail.Body = new TextPart("html")
                        {
                            Text = "Добрый день! <br> Мы рады приветствовать Вас на нашем сайте. " +
                                    "Для безопасности Вашего аккаунта мы хотим предоставить Вам одноразовый пароль для входа в систему. Пожалуйста, не сообщайте этот пароль третьим лицам.<br>" +
                                    "Ваш пароль:" +
                                    "<h1>" + password + "</h1>" +
                                    "С уважением, Команда ТСЖ."

                        };

                    using (MailKit.Net.Smtp.SmtpClient smtp = new MailKit.Net.Smtp.SmtpClient())
                    {
                        smtp.Connect("smtp.gmail.com", 587, SecureSocketOptions.Auto);
                        smtp.Authenticate("gptevcat@gmail.com", configuration["email_password"]);
                        smtp.Send(mail);
                        smtp.Disconnect(true);
                    }
                }
                messageHasSend = true;

                await sessionStorageService.SetItemAsync<bool>("messageHasSend", messageHasSend);

                StateHasChanged();

                await Stopwatch();
            }
            catch (Exception e)
            {
                errmessage = e.Message.ToString();
            }

        }
    }

    private async Task Stopwatch()
    {
        TimeSpan timeSpan = new TimeSpan(0, 0, 1);
        while (timer > new TimeSpan())
        {
            await Task.Delay(1000);
            timer = timer.Subtract(timeSpan);
            await sessionStorageService.SetItemAsync<TimeSpan>("timer", timer);
            StateHasChanged();
        }
        timer = new TimeSpan(0, timerLenght, 0);
        messageHasSend = false;
        StateHasChanged();
    }

    private void saveOrUpdateUser()
    {
        try
        {
            client.Email = myemail;
            client.Password = password;
            client.OtpRequestedTime = DateTime.Now;

            if (ClientService.getSingleClientByEmail(myemail) != null)
            {
                ClientService.updateClientByEmail(myemail, client);
            }
            else
            {
                ClientService.insertClient(client);
            }
        }
        catch (Exception ex) { }
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            timer = await sessionStorageService.GetItemAsync<TimeSpan>("timer");
            messageHasSend = await sessionStorageService.GetItemAsync<bool>("messageHasSend");
            StateHasChanged();
            await Stopwatch();
        }
        catch (Exception ex) { }
    }

    private async void handleUserAuthorization()
    {
        try
        {
            client = ClientService.getSingleClientByEmail(myemail);
            if (client != null)
            {
                if (client.Password == null)
                {
                    errmessage = "Невозможно повторно использовать код";
                }
                else if (client.Password == userpassword)
                {

                    await sessionStorageService.SetItemAsync<string>("email", client.Email);
                    await sessionStorageService.SetItemAsync<Guid>("clientId", client.ClientId);

                    if (DateTime.Now.Subtract(new TimeSpan(0, 5, 0)) < client.OtpRequestedTime)
                    {
                        ((CustomAuthenticationStateProvider)authenticationStateProvider).userAuthorized(myemail);
                        client.Password = null;
                        client.OtpRequestedTime = null;
                        ClientService.updateClientByEmail(myemail, client);
                        if (client.isEmpty())
                        {
                            nav.NavigateTo("/prergistration");
                        }
                        else
                        {
                            nav.NavigateTo("/meter_readings");
                        }
                    }
                    else errmessage = "Время действия кода истекло";

                }
                else errmessage = "Введенный неправильный код";
            }
            else errmessage = "Пользователя с таким email не существует";
        }
        catch (Exception ex) { }
    }

}

