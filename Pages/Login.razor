@page "/"

@using MailKit.Net.Smtp;
@using MailKit;
@using MimeKit;
@using Microsoft.EntityFrameworkCore
@using testBlazor.Data;
@using testBlazor.Data.services
@using System.Text;
@using MailKit.Security;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage ProtectedSessionStore
@inject IClientService ClientService
@inject NavigationManager nav;


<h1>@error</h1>
<div id="form-entry">
    <div id="logo">
    </div>
    <label for="entr-button" id="entry-label">Вход в личный кабинет</label>
    <form name="sending-email">
        <div class="contact">
            <label for="email">Электронная почта</label>
            <input type="email" name="email" required @bind="myemail">
        </div>
        <div class="contact">
            <label for="pswd">Одноразовый пароль</label>
            <input type="password" name="pswd" @bind="userpassword" required>
        </div>
        <div id="buttons-row">
            <input type="button" name="next" value="Получить пароль" @onclick="sendEmail">
            <input type="button" name="entry-button" value="Войти" @onclick="tempAuthenticate">
        </div>

        <div id="consent">
            <input type="checkbox" name="checkbox" required>
            <label for="checkbox">
                Вы соглашаетесь с правилами <a href="">Пользовательского соглашения</a> и <a href="">Политикой обработки персональных данных</a>.
            </label>
        </div>
        <label>@errmessage</label>

    </form>
    <a id="support-on-login" href="">Служба поддержки</a>
</div>

@code {
    private string message { get; set; } = "";

    private string errmessage { get; set; } = "";

    private string error { get; set; } = "";

    private string? myemail { get; set; } = "";

    private string? userpassword { get; set; } = "";

    public Client? client = new Client();
    public Client? cli = new Client();

    private string password = "";

    private bool clientExistFlag = false;

    public string CreatePassword(int length)
    {
        const string valid = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder res = new StringBuilder();
        Random rnd = new Random();
        while (0 < length--)
        {
            res.Append(valid[rnd.Next(valid.Length)]);
        }
        return res.ToString();
    }

    private void sendEmail()
    {
        try
        {
            password = CreatePassword(10);
            Console.WriteLine(password);  //Убрать нахуй
            saveOrUpdateUser();
            using (MimeMessage mail = new MimeMessage())
            {
                mail.From.Add(new MailboxAddress("ЖКХ", "gptevcat@gmail.com"));
                mail.To.Add(new MailboxAddress("Павлик из 3 подъезда", myemail));
                mail.Subject = "ЖКХ. Одноразовый пароль для входа на сайт";
                mail.Body = new TextPart("plain")
                    {
                        Text = @"

                    Ваш одноразовый пароль для входа в приложение " + password +
                        "\nХорошего вам дня"

                    };

                using (SmtpClient smtp = new SmtpClient())
                {
                    smtp.Connect("smtp.gmail.com", 587, SecureSocketOptions.Auto);
                    smtp.Authenticate("gptevcat@gmail.com", "ayzomvmslxvclcpy");
                    smtp.Send(mail);
                    smtp.Disconnect(true);
                }
            }
        }
        catch (Exception e)
        {
            error = e.Message.ToString();
        }
    }

    private void saveOrUpdateUser()
    {
        //client.ClientId = 1;
        client.Email = myemail;
        client.Password = password;
        client.OtpRequestedTime = DateTime.Now;
        //clientExists();
        if (ClientService.getSingleClientByEmail(myemail) != null)
            ClientService.updateClientByEmail(myemail, client);
        else ClientService.insertClient(client);
        //ClientService.updateClientByEmail(myemail, client);

    }

    private void tempAuthenticate()
    {
        client = ClientService.getSingleClientByEmail(myemail);
        if (client != null)
        {
            if (client.Password == userpassword)
            {
                if (DateTime.Now.Subtract(new TimeSpan(0, 5, 0)) < client.OtpRequestedTime)
                {


                    ProtectedSessionStore.SetAsync("email", client.Email);
                    if (client.isEmpty())
                    {
                        nav.NavigateTo("/prergistration");
                    }
                    else
                    {
                        nav.NavigateTo("/Statement");
                    }
                }
                else errmessage = "Время действия кода истекло";

            }
            else errmessage = "Введенный неправильный код";
        }
        else errmessage = "Пользователя с таким email не существует";    
    }

    
}

