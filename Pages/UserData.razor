@page "/user"

@using Microsoft.EntityFrameworkCore
@using testBlazor.Data;
@using testBlazor.Data.services
@using System.Text;

@inject IClientService ClientService
@inject IClientAddressService AddressService
@inject NavigationManager nav;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService;
@inject IJSRuntime JsRuntime

@attribute [Authorize]

<head>
    <title>Пользователь</title>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700&amp;subset=cyrillic" rel="stylesheet">
</head>

<div id="mainDiv">
    <div id="forms-personal">
        <form class="user-data-forms" @onsubmit="updateUser">
            <div class="dataContainer">
                <h3>Личные данные</h3>
                <div class="innerDiv">
                    <div class="inputDiv">
                        <label>Фамилия *</label>
                        <input type="text" pattern="^[А-Яа-яЁё\s]+$" @bind="client.Surname" required />
                    </div>
                    <div class="inputDiv">
                        <label>Имя *</label>
                        <input type="text" pattern="^[А-Яа-яЁё\s]+$" @bind="client.Name" required/>
                    </div>
                    <div class="inputDiv">
                        <label>Отчество</label>
                        <input type="text" pattern="^[А-Яа-яЁё\s]+$"  @bind="client.Patronymic" />
                    </div>
                </div>
                <div class="innerDiv">
                    <div class="inputDiv">
                        <label>Номер телефона</label>
                        <input type="text" pattern="[\+]\d{11}" @bind="client.PhoneNumber" placeholder="+79271234567" />
                    </div>
                    <div class="inputDiv">
                        <label>Электронная почта *</label>
                        <input type="email" @bind="client.Email" required disabled/>
                    </div>
                </div>
            </div>
            <input type="submit" name="save-personal-data" value="Сохранить"/>
        </form>
        <form class="user-data-forms" @onsubmit="addAddress">
            <div class="dataContainer">
                <h3>Адрес</h3>
                <div class="innerDiv">
                    <div class="inputDiv">
                        <label>Город *</label>
                        <input type="text" pattern="^[-А-Яа-яЁё\s]+$" @bind="address.City" required />
                    </div>
                    <div class="inputDiv">
                        <label>Улица *</label>
                        <input type="text" pattern="^[-.,А-Яа-яЁё\s]+$"  @bind="address.Street" required />
                    </div>
                    <div class="inputDiv">
                        <label>Дом *</label>
                        <input type="number" @bind="address.Building" required />
                    </div>
                </div>
                <div class="innerDiv">
                    <div class="inputDiv">
                        <label>Корпус</label>
                        <input type="text" @bind="address.House" />
                    </div>
                    <div class="inputDiv">
                        <label>Квартира *</label>
                        <input type="number" @bind="address.Apartment" required />
                    </div>
                </div>

            </div>
            <input type="submit" name="save-personal-data" value="Добавить" />
        </form>

    </div>
    <div class="dataContainer" hidden="@hidden">
        <div class="addressList">
            <h3>Список адресов:</h3>
            <ul>
                <li>
                    <label>
                        Город
                    </label>
                    <label>
                        Улица
                    </label>
                    <label>
                        Дом
                    </label>
                    <label>
                        Корпус
                    </label>
                    <label>
                        Квартира
                    </label>
                </li>
                @if (!hidden) @foreach (var adrs in addresses)
                    {
                        <li>
                            <div class="addresses">
                                <label>
                                    @adrs.City
                                </label>
                                <label>
                                    @adrs.Street
                                </label>
                                <label>
                                    @adrs.Building
                                </label>
                                <label>
                                    @adrs.House
                                </label>
                                <label>
                                    @adrs.Apartment
                                </label>
                            </div>
                            <input type="button" @onclick="() => deleteAddress(adrs.ClientAddressId)" value="X"/>
                        </li>
                    }
            </ul>
        </div>
    </div>
</div>

@code {
    public string email { get; set; } = "";
    public bool hidden { get; set; } = true;
    Client? client = new Client();
    ClientAddress? address = new ClientAddress();
    List<ClientAddress> addresses = new List<ClientAddress>();

    public async void updateUser()
    {
        ClientService.updateClientByEmail(email, client);
    }

    public async void deleteAddress(Guid addressId)
    {
        try
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Вы точно хотите удалить адрес?");
            if (confirmed)
            {
                AddressService.deleteClientAddress(addressId);
                nav.NavigateTo(nav.Uri, forceLoad: true);
            }
        }catch (Exception ex){}
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await sessionStorageService.GetItemAsync<string>("email");
            if (result != null)
            {
                hidden = true;
                email = result;
                client = ClientService.getSingleClientByEmail(email);
                if (client != null)
                {
                    addresses = AddressService.GetClientAddress(client.ClientId);

                    if (addresses.GetEnumerator().MoveNext())
                        hidden = false;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex) { }

    }

    public void addAddress()
    {
        try
        {
            address.ClientId = client.ClientId;
            address.Client = client;
            AddressService.insertClientAddress(address);
            hidden = false;
            nav.NavigateTo(nav.Uri, forceLoad: true);
        }
        catch (Exception ex) { }
    }

}
